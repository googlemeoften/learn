CAS操作的理解
    1、基于CAS的非阻塞操作
        1、非阻塞算法是相当于锁机制的：一个线程的挂起和阻塞不应该引起其他线程的的失败和挂起，该算法一般是利用硬件层面支持的原子操作指令来取代锁

        2、从AtomicInteger的线程安全去简单的理解

         AtomicInteger.getAndIncrement()方法源码

         public final int getAndIncrement() {
            for (;;) {
                int current = get();
                int next = current + 1;
                if (compareAndSet(current, next))
                   return current;
            }
         }

          AtomicInteger.compareAndSet（）方法源码

          public final boolean compareAndSet(int expect, int update) {
              return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
          }

          在AtomicInteger的源码中的CAS操作主要是通过Unsafe类来实现的，在Unsafe中比较我认为比较常用的几个方法

          1、 public native long objectFieldOffset(Field var1); 该方法返回类属性的地址值

          2、public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);

          var1：代表的是对象
          var2：代表对象的属性的内存地址
          var3：代表的期望值
          var4：代表的是更新值

          该方法主要利用的硬件层面的原子性操作：CAS操作主要涉及到3个操作数：V内存值，A预期旧值，B要修改的新值，当V==A时，V=B；

    2、CAS的优点
        1、利用硬件的原生支持代替JVM对代码路径的锁定，从而提供更细粒度（独立的内存地址）的同步。

        2、失败的线程可以立即重试而不用被挂起，降低了争用成本，即使有少量失败的CAS操作，也依然比锁争用造成的重新调度快的多。

        3、争用CAS提供更短的延迟（因为争用CAS比争用锁会更快），提供更好的吞吐率。

        4、对生存问题（死锁和线程优先级反转）提供更好的防御

    3、CAS与锁的比较
        在轻度到中度的争用情况下，非阻塞算法的性能会超越阻塞算法，因为 CAS 的多数时间都在第一次尝试时就成功，

        而发生争用时的开销也不涉及线程挂起和上下文切换，只多了几个循环迭代，而争用的 CAS 比争用的锁获取涉及更短的延迟

        在高度争用的情况下（即有多个线程不断争用一个内存位置的时候），基于锁的算法开始提供比非阻塞算法更好的吞吐率，

        因为当线程阻塞时，它就会停止争用，耐心地等候轮到自己，从而避免了进一步争用

    4、CAS的问题
        1、ABA问题，解决思路：版本控制(JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题)

        2、循环时间长开销大

        3、只能保证一个共享变量的原子操作，解决思路：把多个共享变量合并成一个共享变量来操作
