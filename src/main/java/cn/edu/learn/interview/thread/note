Java当中的锁机制
    1、synchronized关键字（悲观锁）
        1、synchronized实现同步是调用了JVM的底层实现，Java的线程是映射到操作系统的原生的线程上的，因此线程的挂起和阻塞都会转入到内核中进行
        2、在多线程竞争的条件下，加锁和释放锁会频繁的导致上下文的切换。
        3、一个线程获得锁其他需要该锁的线程就会被挂起的
        4、synchronized的使用
            1、对于同步方法，锁是当前实例对象。
            2、对于静态同步方法，锁是当前对象的Class对象。
            3、对于同步方法块，锁是Synchonized括号里配置的对象。

    2、ReenTrantLock(乐观锁)
        1、乐观锁的概念：假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。
        2、在Java中使用CAS实现，CAS有3个操作数：V内存值，A预期旧值，B要修改的新值，当V==A时，V=B；
        3、

    3、synchronized锁优化
        1、锁存在对象头中（Mark Word[存储对象的hashCode、年龄或者是锁信息]）
        2、偏向锁：大多数情况下不存在多线程的竞争，总是同一个线程获得锁，为了减少获得锁的代价引入了偏向锁