AOP实现机制
    1、AOP实现的方法
        1、静态代理：在编译期，切面直接以字节码的形式编译到目标字节码文件中
        2、动态代理：在运行期，目标类加载后，为接口动态生成代理类，将切面植入到代理类（需要接口实现）
        3、动态字节码生成：在运行期，目标类加载后，动态构建字节码文件生成目标类的子类，将切面逻辑加入到子类中。（不需要接口实现CGLIB）
        4、自定义类加载器：在运行期，目标加载前，将切面逻辑加到目标字节码里。（Javassist来实现）

    2、AOP涉及的成员
        1、Joinpoint：拦截点，如某个业务方法。
        2、Pointcut：Joinpoint的表达式，表示拦截哪些方法。一个Pointcut对应多个Joinpoint。
        3、Advice: 要切入的逻辑。
        4、Before Advice 在方法前切入。
        5、After Advice 在方法后切入，抛出异常时也会切入。
        6、After Returning Advice 在方法返回后切入，抛出异常则不会切入。
        7、After Throwing Advice 在方法抛出异常时切入。
        8、Around Advice 在方法执行前后切入，可以中断或忽略原有流程的执行。
        9、具体关系：织入器通过在切面中定义pointcut来搜索目标（被代理类）的JoinPoint(切入点)，然后把要切入的逻辑（Advice）织入到目标对象里，生成代理类。